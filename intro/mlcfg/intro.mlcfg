
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
     ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module Intro_Hello_Interface
  use mach.int.Int
  use mach.int.Int32
  use prelude.Borrow
  val hello [#"../../src/lib.rs" 11 0 11 47] (a : borrowed int32) (b : borrowed int32) : int32
    ensures { [#"../../src/lib.rs" 8 10 8 24] result = (1 : int32) }
    ensures { [#"../../src/lib.rs" 9 10 9 20]  ^ a = (0 : int32) }
    ensures { [#"../../src/lib.rs" 10 10 10 20]  ^ b = (1 : int32) }
    
end
module Intro_Hello
  use mach.int.Int
  use mach.int.Int32
  use prelude.Borrow
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = int32
  let rec cfg hello [#"../../src/lib.rs" 11 0 11 47] [@cfg:stackify] [@cfg:subregion_analysis] (a : borrowed int32) (b : borrowed int32) : int32
    ensures { [#"../../src/lib.rs" 8 10 8 24] result = (1 : int32) }
    ensures { [#"../../src/lib.rs" 9 10 9 20]  ^ a = (0 : int32) }
    ensures { [#"../../src/lib.rs" 10 10 10 20]  ^ b = (1 : int32) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : int32;
  var a_1 : borrowed int32;
  var b_2 : borrowed int32;
  var _6 : int32;
  var _7 : int32;
  {
    a_1 <- a;
    b_2 <- b;
    goto BB0
  }
  BB0 {
    a_1 <- { a_1 with current = ([#"../../src/lib.rs" 12 9 12 10] (0 : int32)) };
    b_2 <- { b_2 with current = ([#"../../src/lib.rs" 13 9 13 10] (1 : int32)) };
    _6 <-  * a_1;
    assume { Resolve0.resolve a_1 };
    _7 <-  * b_2;
    assume { Resolve0.resolve b_2 };
    _0 <- ([#"../../src/lib.rs" 14 4 14 11] _6 + _7);
    return _0
  }
  
end
